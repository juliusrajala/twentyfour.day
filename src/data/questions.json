[
  {
    "question": "How do you approach choosing a tech stack for a new project?",
    "answer": "Selecting a stack for a new project can be tricky. There's often no single solution to solving any problem. Often, boring technology is better than exciting in the long run. What I think matters most is confidence in the selected tools, from both the perspective of the development team and the client. Every project is different, so consider special needs and future scalability then align your decision with those demands and expectations."
  },
  {
    "question": "What's your strategy for managing technical debt in ongoing projects?",
    "answer": "A personal favourite for me has been reserving one day in the working week to technical debt and refactoring of the hairier bits in projects. It can sometimes be difficult to justify time spent on this code gardening to the client, but it usually pays out to outline the accruing costs down the road that might follow. The more dependencies your system develops, the harder technical debt is to manage. So continuous maintenance is the way forward."
  },
  {
    "question": "How do you balance innovation with maintaining existing systems?",
    "answer": "Innovation or new features, are certainly the target with the best short term return. Therefore, they're usually also what the client is more interested in. Maintenance keeps the lights on though and getting new users is hardly worth it if you can't keep them due to instability. Do critical maintenance work first. Build mostly features that create value for clients. After that, do everything else."
  },
  {
    "question": "Can you describe a particularly challenging bug you encountered recently and how you resolved it?",
    "answer": "A recent bug I encountered was perhaps not particularly challenging, but still a pain in the ass to debug. I‚Äôve been working on a SvelteKit project during my free time. Reports from some users mentioned sessions randomly dying. I could just not figure out what was happening, because it seemed the sessions were being expired via calls to the signout functionality. Turns out I had preloading links set up on for all link elements, including a logout button I had grabbed from the project template. When users hovered on the button, the signout-page would be preloaded and their sessions would be destroyed. Preload with care and consider if using a link to sign out your users is the best option. "
  },
  {
    "question": "How do you ensure code quality and maintainability in your team?",
    "answer": "It sometimes frustrates me that we‚Äôre still struggling with issue regarding code quality and I‚Äôm mostly speaking in the superficial fashion. By the end of 2023, we should have had linters and formatters available that would make the conversation mostly moot. I use any and all automatic tools that advice you on code quality. Maintainability seems more of an architectural question. Though following SOLID still goes a long way in keeping our code maintainable."
  },
  {
    "question": "What are the key factors you consider for successful remote team collaboration?",
    "answer": "Remote teams should still maintain critical feedback loops that keep everyone in the team aware of each others work. Dailies and weeklies are all the more important when you‚Äôre not working in the same room with each other. Make work visible. Use your digital kanban. Schedule regular conversation time between team members. Have regular face-to-face meetings."
  },
  {
    "question": "How do you handle conflicting opinions within your team about technical approaches?",
    "answer": "Open dialogue and respect for different perspectives. I encourage team discussions where everyone can present their views. In the end, decisions are made based on what aligns best with our the client's existing solutions, needs of the project and technical requirements. Sometimes this means going with the majority view, other times it's about finding a compromise."
  },
  {
    "question": "How do you stay updated with new programming languages and frameworks?",
    "answer": "Mostly via building things. Admittedly, I don't build toy software quite as much as I've used to, but I do still like to to learn new things via doing. This project is a brief intro to Astro on its own."
  },
  {
    "question": "What's your experience with adopting new technologies mid-project?",
    "answer": "I‚Äôve had success with adopting new technologies during projects. I think it all comes down to the scope of the adoption and finding the correct places where to adopt new tech. This somewhat takes me back to earlier discussion regarding the balance of innovation and maintenance."
  },
  {
    "question": "Can you share an experience where you had to significantly refactor a codebase?",
    "answer": "I once spent a weekend porting the old codebase of app.thribune.com from JavaScript to TypeScript and updated all of our major dependencies and build-tools while doing it. That was a learning experience and actually started more as a more of a test to see how far we could go with some effective grepping. Half-way through, I realized I was so invested in this I had to push through. The TypeScript conversion was the easy part, since you could apply laxer rules at the beginning and fix things as you progress. But updating SCSS through a major version nearly took my sanity. Choose your battles and when you fight them."
  },
  {
    "question": "How do you approach documentation within your team?",
    "answer": "Documentation should come in layers, but the part that is probably most interesting to the team is the technical and architectural documentation, which I believe should live as close to the code as possible. Architectural docs and the high level documentation I prefer to find close to the project management tools for easy reference. Solution or lower level documentation might even live with the code. Newcomers to the team test your documentation each time someone starts and you iterate based on what they can‚Äôt find."
  },
  {
    "question": "What strategies do you use to mentor developers?",
    "answer": "There‚Äôs different approaches to mentoring and to be honest, I haven‚Äôt found the best solution yet. If we‚Äôre talking about getting someone new up to speed with a project, I tend to prefer pair-programming as the chosen strategy due to the way it helps both parties understand the project better. As for general career and professional mentoring, picking a topic and setting up a regular schedule to discuss and check back on the mentees studies and progress has felt like a good approach. Providing direction and feedback seems like the largest part of a mentors role."
  },
  {
    "question": "How do you use AI-tools in your daily work?",
    "answer": "Depending on what's agreed upon with the client of course. ü§ñ I've got a custom OpenAI wrapper I'm using to debug unfamiliar error messages and sometimes to review code. On the editor side, If I'm working with VS code, I'm likely using Github Copilot to support the development work. I sometimes also play ball with OpenAI regarding architectural decisions and ideation for solutions"
  },
  {
    "question": "What are your thoughts cross-functional team collaboration in projects?",
    "answer": "Cross-functional teams often feel like the peak of performance in software projects. Having that solving power for different issues exist within the team makes for an eaasier existence and allows tackling issues much faster than playing back-and-forth between functional silos. Big üëç."
  },
  {
    "question": "Can you discuss a time when you had to make a larger architectural decision?",
    "answer": "Quite a few years ago we were getting the product of our startup ready for some new clients to begin their usage of the platform. In order to prepare for this grand new clientele, we did a fair bit of refactoring to divide our platform into multiple components for easier changes down the line. Classic case of premature optimization and excessive boundaries. These changes slowed our development speed down to a crawl for a team of three. For that stage in our existance, a monorepo would have been both the easier and faster to develop option. ü§∑ Lesson learned."
  },
  {
    "question": "How do you handle deadline pressures without compromising on code quality?",
    "answer": "I feel a lot of this comes down to tooling and setting realistic expectations. As discussed earlier, code quality should mainly be enforced via automatic tooling. Pressure can force suboptimal solutions though. Sometimes you have to make compromises to deliver within the expected time frame, just don‚Äôt compromise on critical issues or features."
  },
  {
    "question": "What's your approach to troubleshooting and debugging in a complex system?",
    "answer": "I feel a lot of this comes down to tooling and setting realistic expectations. As discussed earlier, code quality should mainly be enforced via automatic tooling. Pressure can force suboptimal solutions though. Sometimes you have to make compromises to deliver within the expected time frame, just don‚Äôt compromise on critical issues or features."
  },
  {
    "question": "How do you prioritize tasks in a fast-paced development environment?",
    "answer": ""
  },
  {
    "question": "Can you share your experience with continuous integration and deployment?",
    "answer": ""
  },
  {
    "question": "How do you approach security concerns in your software development process?",
    "answer": ""
  },
  {
    "question": "What has been your most successful project to date, and why?",
    "answer": ""
  },
  {
    "question": "How do you manage knowledge transfer within your team?",
    "answer": ""
  },
  {
    "question": "What are your thoughts on microservices vs monolithic architectures?",
    "answer": ""
  },
  {
    "question": "Can you share an example of a successful agile project you've been part of?",
    "answer": ""
  }
]
